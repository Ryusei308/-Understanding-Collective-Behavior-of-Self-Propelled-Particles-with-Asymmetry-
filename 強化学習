import gym
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import display, clear_output
import matplotlib.animation as animation
from IPython.display import display, HTML

# 環境の作成
env = gym.make('CartPole-v1')

# Qテーブルの初期化
n_actions = env.action_space.n  # 行動数
n_states = 24  # 状態空間の離散化
Q = np.zeros([n_states] * len(env.observation_space.high) + [n_actions])

# 状態空間を離散化するための関数
def discretize(state):
    state_bins = [np.linspace(low, high, n_states) for low, high in zip(env.observation_space.low, env.observation_space.high)]
    return tuple(np.digitize(state[i], state_bins[i]) - 1 for i in range(len(state)))

# 学習パラメータ
alpha = 0.1  # 学習率
gamma = 0.99  # 割引率
epsilon = 0.1  # ε-greedy法

# 学習ループ
for episode in range(1000):
    state = env.reset()
    done = False
    while not done:
        # ε-greedy法による行動選択
        if np.random.rand() < epsilon:
            action = env.action_space.sample()  # ランダム行動
        else:
            action = np.argmax(Q[discretize(state)])  # Q値が最大の行動

        # 次の状態と報酬を取得
        next_state, reward, done, _ = env.step(action)

        # Q値の更新
        next_state_discretized = discretize(next_state)
        Q[discretize(state) + (action,)] += alpha * (reward + gamma * np.max(Q[next_state_discretized]) - Q[discretize(state) + (action,)])

        state = next_state

    # エピソード毎の進捗表示
    if episode % 100 == 0:
        print(f"Episode {episode}: Q-table updated")

# 最後のテスト
state = env.reset()
done = False

# Matplotlibのアニメーションで表示する準備
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111)
img = ax.imshow(env.render(mode='rgb_array'))  # 初期フレームを取得

def update_plot(i):
    global state, done
    if done:
        state = env.reset()
        done = False
    action = np.argmax(Q[discretize(state)])  # 最適行動を選択
    state, reward, done, _ = env.step(action)
    img.set_data(env.render(mode='rgb_array'))  # 新しいフレームを更新
    clear_output(wait=True)
    display(fig)

# アニメーションの作成
ani = animation.FuncAnimation(fig, update_plot, frames=200, interval=50)
html = ani.to_jshtml()
display(HTML(html))


plt.show()
